// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReportingProject.Data.Contextes;

#nullable disable

namespace ReportingProject.Migrations
{
    [DbContext(typeof(ReportingDBContext))]
    [Migration("20231219125955_Add_ReportNotes_Table_With_Relations")]
    partial class Add_ReportNotes_Table_With_Relations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatuses");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClientRef")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceBillingPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlackListed")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("Fax")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.CompanyEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyEmails");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ClientShare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("ContractFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ISOCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.FinancialAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("AccountFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SOADate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("SOAFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SWIFTCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.HasIndex("CountryId");

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.IndustryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IndustryTypes");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ReceiptFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SwiftFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceStatusID");

                    b.HasIndex("Month", "Year");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.InvoiceNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceNotes");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatuses");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<int?>("EmloyeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("IndustryTypeId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.MerchantInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("int");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("MerchantInvoices");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.MerchantReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.ToTable("MerchantReports");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BadDept")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceBillingPeriod")
                        .HasColumnType("int");

                    b.Property<int>("MSISDNLength")
                        .HasColumnType("int");

                    b.Property<decimal>("NonResidentialValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PNAValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Prefix")
                        .HasColumnType("int");

                    b.Property<decimal>("VatValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.OperatorReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DifferencesFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("IMIFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MWFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RefundFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.ToTable("OperatorReports");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ReportFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ReportTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("Month", "Year");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ReportNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportNotes");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Revenue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("MerchantRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("PostSubscriptions")
                        .HasColumnType("int");

                    b.Property<decimal>("Refund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSubscriptions")
                        .HasColumnType("int");

                    b.Property<decimal>("UniverseRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Month", "Year");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ServiceOperator", b =>
                {
                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LaunchDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("MTITFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("MWRef")
                        .HasColumnType("int");

                    b.Property<decimal>("OperatorShare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ShortCode")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "OperatorId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("ServiceOperators");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStatuses");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.UniverseInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("OperatorId");

                    b.ToTable("UniverseInvoices");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MachineAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserHostAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserHostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportingProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Client", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Company", "Company")
                        .WithOne("Client")
                        .HasForeignKey("ReportingProject.Data.Entities.Client", "CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Company", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId");

                    b.HasOne("ReportingProject.Data.Entities.Currency", "Currency")
                        .WithMany("Companies")
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.CompanyEmail", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Company", "Company")
                        .WithMany("CompanyEmails")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Consultant", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Client", "Client")
                        .WithOne("Consultant")
                        .HasForeignKey("ReportingProject.Data.Entities.Consultant", "ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Contract", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Merchant", "Merchant")
                        .WithMany("Contracts")
                        .HasForeignKey("MerchantId");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.FinancialAccount", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Client", "Client")
                        .WithMany("FinancialAccount")
                        .HasForeignKey("ClientId");

                    b.HasOne("ReportingProject.Data.Entities.Country", "Country")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("CountryId");

                    b.Navigation("Client");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Invoice", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceStatus");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.InvoiceNote", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceNotes")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Merchant", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Consultant", "Consultant")
                        .WithMany("Merchants")
                        .HasForeignKey("ConsultantId");

                    b.HasOne("ReportingProject.Data.Entities.Employee", "Employee")
                        .WithMany("Merchants")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("ReportingProject.Data.Entities.IndustryType", "IndustryType")
                        .WithMany("Merchants")
                        .HasForeignKey("IndustryTypeId");

                    b.Navigation("Consultant");

                    b.Navigation("Employee");

                    b.Navigation("IndustryType");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.MerchantInvoice", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("MerchantInvoices")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportingProject.Data.Entities.Invoice", null)
                        .WithOne("MerchantInvoice")
                        .HasForeignKey("ReportingProject.Data.Entities.MerchantInvoice", "InvoiceId");

                    b.HasOne("ReportingProject.Data.Entities.Merchant", null)
                        .WithMany("MerchantInvoices")
                        .HasForeignKey("MerchantId");

                    b.Navigation("ApprovalStatus");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.MerchantReport", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Merchant", "Merchant")
                        .WithMany("MerchantReports")
                        .HasForeignKey("MerchantId");

                    b.HasOne("ReportingProject.Data.Entities.Report", "Report")
                        .WithOne("MerchantReport")
                        .HasForeignKey("ReportingProject.Data.Entities.MerchantReport", "ReportId");

                    b.Navigation("Merchant");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Notification", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId");

                    b.HasOne("ReportingProject.Data.Entities.ApplicationUser", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReportingProject.Data.Entities.ApplicationUser", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("NotificationType");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Operator", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Company", "Company")
                        .WithOne("Operator")
                        .HasForeignKey("ReportingProject.Data.Entities.Operator", "CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.OperatorReport", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Operator", "Operator")
                        .WithMany("OperatorReports")
                        .HasForeignKey("OperatorId");

                    b.HasOne("ReportingProject.Data.Entities.Report", "Report")
                        .WithOne("OperatorReport")
                        .HasForeignKey("ReportingProject.Data.Entities.OperatorReport", "ReportId");

                    b.Navigation("Operator");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Report", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("Reports")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportingProject.Data.Entities.ReportType", "ReportType")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTypeId");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("ReportType");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ReportNote", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Report", "Report")
                        .WithMany("ReportNotes")
                        .HasForeignKey("ReportId");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Revenue", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Service", "Service")
                        .WithMany("Revenues")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Service", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Contract", "Contract")
                        .WithOne("Service")
                        .HasForeignKey("ReportingProject.Data.Entities.Service", "ContractId");

                    b.HasOne("ReportingProject.Data.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId");

                    b.Navigation("Contract");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ServiceOperator", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Operator", "Operator")
                        .WithMany("ServiceOperators")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportingProject.Data.Entities.Service", "Service")
                        .WithMany("ServiceOperators")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportingProject.Data.Entities.ServiceStatus", "ServiceStatus")
                        .WithMany("ServiceOperators")
                        .HasForeignKey("ServiceStatusId");

                    b.Navigation("Operator");

                    b.Navigation("Service");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.UniverseInvoice", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.Invoice", "Invoice")
                        .WithOne("UniverseInvoice")
                        .HasForeignKey("ReportingProject.Data.Entities.UniverseInvoice", "InvoiceId");

                    b.HasOne("ReportingProject.Data.Entities.Operator", "Operator")
                        .WithMany("UniverseInvoices")
                        .HasForeignKey("OperatorId");

                    b.Navigation("Invoice");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.UserSession", b =>
                {
                    b.HasOne("ReportingProject.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserSessions")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ApprovalStatus", b =>
                {
                    b.Navigation("MerchantInvoices");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Client", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Company", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("CompanyEmails");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Consultant", b =>
                {
                    b.Navigation("Merchants");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Contract", b =>
                {
                    b.Navigation("Service");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("FinancialAccounts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Currency", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Employee", b =>
                {
                    b.Navigation("Merchants");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.IndustryType", b =>
                {
                    b.Navigation("Merchants");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceNotes");

                    b.Navigation("MerchantInvoice");

                    b.Navigation("UniverseInvoice");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.InvoiceStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Merchant", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("MerchantInvoices");

                    b.Navigation("MerchantReports");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Operator", b =>
                {
                    b.Navigation("OperatorReports");

                    b.Navigation("ServiceOperators");

                    b.Navigation("UniverseInvoices");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Report", b =>
                {
                    b.Navigation("MerchantReport");

                    b.Navigation("OperatorReport");

                    b.Navigation("ReportNotes");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ReportType", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.Service", b =>
                {
                    b.Navigation("Revenues");

                    b.Navigation("ServiceOperators");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ServiceStatus", b =>
                {
                    b.Navigation("ServiceOperators");
                });

            modelBuilder.Entity("ReportingProject.Data.Entities.ServiceType", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
